// Import necessary Azure and configuration namespaces
using Azure;
using Azure.AI.Agents.Persistent;
using Azure.Identity;
using Microsoft.Extensions.Configuration;
using System.Diagnostics;
using System.Collections.Generic;

// Load configuration from appsettings.json to retrieve Azure project settings
IConfigurationRoot configuration = new ConfigurationBuilder()
    .SetBasePath(AppContext.BaseDirectory)
    .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
    .Build();

// Retrieve the Azure AI project endpoint and model deployment name from configuration
var projectEndpoint = configuration["ProjectEndpoint"];
var modelDeploymentName = configuration["ModelDeploymentName"];

// Initialize the PersistentAgentsClient with Azure credentials for authentication
PersistentAgentsClient client = new(projectEndpoint, new DefaultAzureCredential());

// Create an AI agent configured as a storyteller with code interpreter capabilities
// The agent will use the specified model and follow the provided instructions
PersistentAgent agent = await client.Administration.CreateAgentAsync(
    model: modelDeploymentName,
    name: "StreamingResponse",
    instructions: "You are a story teller. Create interesting stories based on the user's prompts.",
    tools: [new CodeInterpreterToolDefinition()]
);

// Create a new conversation thread to maintain message context
PersistentAgentThread thread = await client.Threads.CreateThreadAsync();

// Send a user message to the thread with a story prompt
await client.Messages.CreateMessageAsync(
    thread.Id,
    MessageRole.User,
    "Hi, Agent! Write a story about a person who loves programming and art.");

// Create a streaming run to receive the agent's response in real-time
// Use streaming to get tokens as they're generated, enabling a better user experience
System.ClientModel.AsyncCollectionResult<StreamingUpdate> streamingUpdates = 
    client.Runs.CreateRunStreamingAsync(
        thread.Id,
        agent.Id,
        additionalInstructions: "Please address the user as Jane Doe. The user has a premium account.");

Console.WriteLine("\n[Agent Response (Streaming)]:");

// Process streaming updates as they arrive from the agent
await foreach (StreamingUpdate update in streamingUpdates)
{
    // Handle different types of streaming events to provide appropriate feedback
    
    // MessageStatusUpdate: Indicates changes in message status during processing
    if (update is MessageStatusUpdate messageUpdate)
    {
        Console.WriteLine($"\n[Message Status]: {messageUpdate.UpdateKind}");
    }
    // RunUpdate: Indicates changes in the run status (e.g., queued, in_progress, completed)
    else if (update is RunUpdate runUpdate)
    {
        Console.WriteLine($"\n[Run Status]: {runUpdate.Value.Status}");
    }
    // MessageContentUpdate: Contains the actual text content being generated by the agent
    else if (update is MessageContentUpdate contentUpdate)
    {
        // Stream text tokens to console as they're generated, creating a real-time effect
        if (!string.IsNullOrEmpty(contentUpdate.Text))
        {
            Console.Write(contentUpdate.Text);
        }
    }
}

Console.WriteLine("\n\n[Streaming Complete]");

// Cleanup operations (commented out): Delete the thread and agent when done
// Uncomment these lines to clean up resources after the run completes
// await client.Threads.DeleteThreadAsync(threadId: thread.Id);
// await client.Administration.DeleteAgentAsync(agentId: agent.Id);